---
- name: Provision EC2 instance and install helm,terraform,kubectl
  hosts: localhost
  gather_facts: no
  vars_files: vars.yaml
  tasks:
    - name: Create VPC
      ec2_vpc_net:
        name: ansible-vpc
        cidr_block: "{{ vpc_cidr_block }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: vpc

    - name: Print VPC ID
      debug:
        msg: "VPC ID: {{ vpc.vpc.id }}"

    - name: Create public subnet
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ public_subnet_cidr }}"
        az: "{{ availability_zone_pub }}"
        map_public: yes
        state: present
        tags:
          Name: ansible-subnet-pub
      register: public_subnet
 
    - name: Create private subnet
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ private_subnet_cidr }}"
        az: "{{ availability_zone_pri }}"
        map_public: no
        state: present
        tags:
          Name: ansible-subnet-pri
      register: private_subnet

    - name: Create Internet Gateway
      ec2_vpc_igw:
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc.vpc.id }}"  # Specify the ID of your existing VPC
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: present
        tags:
          Name: ansible-igw
      register: igw

    - name: Print Internet Gateway ID
      debug:
        msg: "Internet Gateway ID: {{ igw.gateway_id }}"

    - name: Create Route Table
      ec2_vpc_route_table:
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc.vpc.id }}"  # Specify the ID of your existing VPC
        tags:
          Name: "ansible-rtb"  # Specify a name for the route table
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: present
      register: route_table

    - name: Print Route Table ID
      debug:
        msg: "Route Table ID: {{ route_table.route_table.id }}"

    - name: Add Route to Internet Gateway
      ec2_vpc_route_table:
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc.vpc.id }}"  # Specify the ID of your existing VPC
        route_table_id: "{{ route_table.route_table.id }}"
        subnets: "{{ public_subnet.subnet.id }}"
        routes: # Use the ID of the created route table
          - dest: "0.0.0.0/0"  # Default route for internet access
            gateway_id: "{{ igw.gateway_id }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: present
      register: route_to_igw

    - name: Create Security Group
      ec2_group:
        name: "ansible-sg"  # Specify the name of your security group
        description: "ansible-sg"
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc.vpc.id }}"  # Specify the ID of your existing VPC
        tags:
          Name: "ansible-sg"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "0.0.0.0/0"  # Example: allow SSH access from anywhere
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: "0.0.0.0/0"  # Example: allow HTTP access from anywhere
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: "0.0.0.0/0"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: security_group

    - name: Launch EC2 instance
      ec2_instance:
        instance_type: "{{ ec2_instance_type }}"
        image_id: "{{ ec2_ami_id }}"
        key_name: "{{ ec2_keypair }}"
        security_group: "{{ security_group.group_id }}"  # Use the ID of the created security group
        region: "{{ aws_region }}"
        vpc_subnet_id: "{{ public_subnet.subnet.id }}"  # Specify the subnet ID where the instance will be launched
        count: 1
        tags:
          Name: "ansible-instance"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        user_data: "{{ user_data }}"
        state: present
      register: ec2_instance

